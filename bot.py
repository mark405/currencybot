import telebot
import schedule
import sqlite3
from time import sleep
from telebot import types
from telebot.util import async_dec
import config
from mainmain import convert_dollar, convert_euro, convert_pound, \
    convert_bitcoin, convert_rubl, convert_frank, convert_canadadollar, \
    convert_yen, convert_ausdollar, convert_ether, convert_israel, convert_litecoin, \
    convert_bitcoin_dollar, convert_ether_dollar, convert_litecoin_dollar
from mainrus import convert_rus_dollar, convert_rus_euro, convert_rus_pound, \
    convert_rus_bitcoin, convert_rus_grivna, convert_rus_frank, convert_rus_canadadollar, \
    convert_rus_yen, convert_rus_ausdollar, convert_rus_ether, convert_rus_israel, convert_rus_litecoin, \
    convert_litecoin_euro, convert_ether_euro, convert_bitcoin_euro

bot = telebot.TeleBot(config.TOKEN)

con = sqlite3.connect("id2.db", check_same_thread=False)

cursor = con.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS USER_TABLE(user_id INT)""")
con.commit()


@bot.message_handler(commands=['start', 'go'])
# @async_dec()
def ask(message):
    try:
        global markup_inline
        markup_inline = types.ReplyKeyboardMarkup(resize_keyboard=True)
        tab_look = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç')
        tab_remind = types.KeyboardButton(text='–í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç')

        markup_inline.add(tab_look, tab_remind)
        send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç\n"
        msg = bot.send_message(message.chat.id, send_message, reply_markup=markup_inline, parse_mode='html')
        # bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        # bot.register_next_step_handler(msg, answer)
        bot.register_next_step_handler(msg, answer)
    except Exception as e:
        print(e)
        msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
        bot.register_next_step_handler(msg, ask)


def answer(message):
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç':
        global gr_markup
        gr_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        grivna_button = types.KeyboardButton('–ì—Ä–∏–≤–Ω–∞')
        rubl_button = types.KeyboardButton('–†—É–±–ª—å')
        back_to_start = types.KeyboardButton('–ù–∞–∑–∞–¥')
        gr_markup.add(grivna_button, rubl_button, back_to_start)
        msg = bot.send_message(message.chat.id, f'–í <b>–≥—Ä–∏–≤–Ω–∞—Ö</b> –∏–ª–∏ <b>—Ä—É–±–ª—è—Ö</b>?', reply_markup=gr_markup,
                               parse_mode='html')
        # bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id)
        bot.register_next_step_handler(msg, grivna_rubl)
    elif message.text == '–í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç':
        global id
        global status
        id = message.from_user.id
        cursor.execute(f"""SELECT user_id FROM USER_TABLE WHERE user_id = {id}""")
        if cursor.fetchone() is None:
            try:
                cursor.execute(f"""INSERT INTO USER_TABLE VALUES(?)""", (id,))
                con.commit()
                msg = bot.send_message(id,
                                       '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã\n–í—Ä–µ–º—è: –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥')
                schedule.every().day.at("09:00").do(job)
                status = 1
                bot.register_next_step_handler(msg, answer)
            except Exception as e:
                print(e)
                bot.send_message(id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        else:
            try:
                cursor.execute(f"""DELETE FROM USER_TABLE WHERE user_id = {id}""")
                con.commit()
                msg = bot.send_message(id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã')
                schedule.cancel_job(job)
                status = 0
                bot.register_next_step_handler(msg, answer)
            except Exception as e:
                print(e)
                bot.send_message(id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')

        while status == 1:
            schedule.run_pending()
            sleep(1)


def job():
    # sqlite.cursor.execute(f"""SELECT user_id FROM USER_TABLE WHERE user_id = {id}""")
    # if sqlite.cursor.fetchone() is None:
    # return None
    # else:
    bot.send_message(id, f'<b>1</b> –¥–æ–ª–ª–∞—Ä –°–®–ê = <b>{str(convert_dollar[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º'
                                           f'\n<b>1</b> –¥–æ–ª–ª–∞—Ä –°–®–ê = <b>{str(convert_rus_dollar[0].text)}</b> —Ä—É–±–ª—è–º',
                     parse_mode='html')


@bot.message_handler(content_types=["text"])
def grivna_rubl(message):
    try:
        if message.text == '–ì—Ä–∏–≤–Ω–∞':
            global markup_reply
            markup_reply = types.ReplyKeyboardMarkup()
            dollar = types.KeyboardButton('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê')
            euro = types.KeyboardButton('–ö—É—Ä—Å –µ–≤—Ä–æ')
            pound = types.KeyboardButton('–ö—É—Ä—Å —Ñ—É–Ω—Ç–∞')
            rubl = types.KeyboardButton('–ö—É—Ä—Å —Ä—É–±–ª—è')
            frank = types.KeyboardButton('–ö—É—Ä—Å —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–≥–æ —Ñ—Ä–∞–Ω–∫–∞')
            canadadollar = types.KeyboardButton('–ö—É—Ä—Å –∫–∞–Ω–∞–¥—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞')
            ausdollar = types.KeyboardButton('–ö—É—Ä—Å –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞')
            yen = types.KeyboardButton('–ö—É—Ä—Å —è–ø–æ–Ω—Å–∫–æ–≥–æ –π–µ–Ω–∞')
            israel = types.KeyboardButton('–ö—É—Ä—Å —à–µ–∫–µ–ª—è')
            zlotiy = types.KeyboardButton('–ö—É—Ä—Å –∑–ª–æ—Ç–æ–≥–æ')
            bitok = types.KeyboardButton('–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞...', )
            backtobutton = types.KeyboardButton('–ù–∞–∑–∞–¥')

            markup_reply.add(dollar, euro, pound, rubl, frank, canadadollar, ausdollar, yen, israel, zlotiy, bitok,
                             backtobutton)
            msg = bot.send_message(message.chat.id, f'<u>–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:</u>', parse_mode='html',
                                   reply_markup=markup_reply)
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–†—É–±–ª—å':
            global rus_markup_reply
            rus_markup_reply = types.ReplyKeyboardMarkup()
            rus_dollar = types.KeyboardButton('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê')
            rus_euro = types.KeyboardButton('–ö—É—Ä—Å –µ–≤—Ä–æ')
            rus_pound = types.KeyboardButton('–ö—É—Ä—Å —Ñ—É–Ω—Ç–∞')
            grivna = types.KeyboardButton('–ö—É—Ä—Å –≥—Ä–∏–≤–Ω—ã')
            rus_frank = types.KeyboardButton('–ö—É—Ä—Å —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–≥–æ —Ñ—Ä–∞–Ω–∫–∞')
            rus_canadadollar = types.KeyboardButton('–ö—É—Ä—Å –∫–∞–Ω–∞–¥—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞')
            rus_ausdollar = types.KeyboardButton('–ö—É—Ä—Å –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞')
            rus_yen = types.KeyboardButton('–ö—É—Ä—Å —è–ø–æ–Ω—Å–∫–æ–≥–æ –π–µ–Ω–∞')
            rus_israel = types.KeyboardButton('–ö—É—Ä—Å —à–µ–∫–µ–ª—è')
            rus_bitok = types.KeyboardButton('–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞...', )
            rus_backtobutton = types.KeyboardButton('–ù–∞–∑–∞–¥')

            rus_markup_reply.add(rus_dollar, rus_euro, rus_pound, grivna, rus_frank, rus_canadadollar, rus_ausdollar,
                                 rus_yen, rus_israel, rus_bitok, rus_backtobutton)
            msg = bot.send_message(message.chat.id, f'<u>–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:</u>', parse_mode='html',
                                   reply_markup=rus_markup_reply)
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ', reply_markup=markup_inline)
            bot.register_next_step_handler(msg, answer)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            msg = bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.register_next_step_handler(msg, ask)
            # bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, grivna_rubl)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def kurs(message):
    try:
        if message.text == '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> –¥–æ–ª–ª–∞—Ä –°–®–ê = <b>{str(convert_dollar[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id, f'<b>1</b> –µ–≤—Ä–æ = <b>{str(convert_euro[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å —Ñ—É–Ω—Ç–∞':
            msg = bot.send_message(message.chat.id, f'<b>1</b> —Ñ—É–Ω—Ç = <b>{str(convert_pound[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å —Ä—É–±–ª—è':
            msg = bot.send_message(message.chat.id, f'<b>1</b> —Ä—É–±–ª—å = <b>{str(convert_rubl[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–≥–æ —Ñ—Ä–∞–Ω–∫–∞':
            msg = bot.send_message(message.chat.id, f'<b>1</b> —Ñ—Ä–∞–Ω–∫ = <b>{str(convert_frank[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å –∫–∞–Ω–∞–¥—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> –∫–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä = <b>{str(convert_canadadollar[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> –∞–≤—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä = <b>{str(convert_ausdollar[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å —è–ø–æ–Ω—Å–∫–æ–≥–æ –π–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, f'<b>1</b> –π–µ–Ω = <b>{str(convert_yen[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—É—Ä—Å —à–µ–∫–µ–ª—è':
            msg = bot.send_message(message.chat.id, f'<b>1</b> —à–µ–∫–µ–ª—å = <b>{str(convert_israel[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, kurs)
        # elif message.text == '–ö—É—Ä—Å –∑–ª–æ—Ç–æ–≥–æ':
        # msg = bot.send_message(message.chat.id, f'<b>1</b> —à–µ–∫–µ–ª—å = <b>{str(convert_zlotiy[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
        # parse_mode='html')
        # bot.register_next_step_handler(msg, kurs)
        elif message.text == '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞...':
            global mark_up
            mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bitcoin = types.KeyboardButton('–ö—É—Ä—Å Bitcoin')
            etherium = types.KeyboardButton('–ö—É—Ä—Å Etherium')
            litecoin = types.KeyboardButton('–ö—É—Ä—Å Litecoin')
            back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
            mark_up.add(bitcoin, etherium, litecoin, back_button)

            inline = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö...',
                                                    url='https://alpari.com/ru/beginner/glossary/cryptocurrency/')
            inline.add(url_button)

            msg = bot.send_message(message.chat.id, f'<b>–ö—É—Ä—Å –æ–¥–Ω–∏—Ö –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç –≤ –º–∏—Ä–µ</b> :)',
                                   parse_mode='html', reply_markup=mark_up)
            bot.register_next_step_handler(msg, new_kurs)
            bot.send_message(message.chat.id, '–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?ü§î\n–¢–æ–≥–¥–∞ –∂–º–∏ —Å—é–¥–∞!', reply_markup=inline)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, '–í –≥—Ä–∏–≤–Ω–∞—Ö –∏–ª–∏ —Ä—É–±–ª—è—Ö?', reply_markup=gr_markup)
            bot.register_next_step_handler(msg, grivna_rubl)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, kurs)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def rus_kurs(message):
    try:
        if message.text == '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> –¥–æ–ª–ª–∞—Ä –°–®–ê = <b>{str(convert_rus_dollar[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id, f'<b>1</b> –µ–≤—Ä–æ = <b>{str(convert_rus_euro[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å —Ñ—É–Ω—Ç–∞':
            msg = bot.send_message(message.chat.id, f'<b>1</b> —Ñ—É–Ω—Ç = <b>{str(convert_rus_pound[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å –≥—Ä–∏–≤–Ω—ã':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> –≥—Ä–∏–≤–Ω–∞ = <b>{str(convert_rus_grivna[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–≥–æ —Ñ—Ä–∞–Ω–∫–∞':
            msg = bot.send_message(message.chat.id, f'<b>1</b> —Ñ—Ä–∞–Ω–∫ = <b>{str(convert_rus_frank[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å –∫–∞–Ω–∞–¥—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> –∫–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä = <b>{str(convert_rus_canadadollar[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> –∞–≤—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä = <b>{str(convert_rus_ausdollar[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å —è–ø–æ–Ω—Å–∫–æ–≥–æ –π–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, f'<b>1</b> –π–µ–Ω = <b>{str(convert_rus_yen[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—É—Ä—Å —à–µ–∫–µ–ª—è':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> —à–µ–∫–µ–ª—å = <b>{str(convert_rus_israel[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞...':
            global rus_mark_up
            rus_mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bitcoin = types.KeyboardButton('–ö—É—Ä—Å Bitcoin')
            etherium = types.KeyboardButton('–ö—É—Ä—Å Etherium')
            litecoin = types.KeyboardButton('–ö—É—Ä—Å Litecoin')
            back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
            rus_mark_up.add(bitcoin, etherium, litecoin, back_button)

            inline = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö...',
                                                    url='https://alpari.com/ru/beginner/glossary/cryptocurrency/')
            inline.add(url_button)

            msg = bot.send_message(message.chat.id, f'<b>–ö—É—Ä—Å –æ–¥–Ω–∏—Ö –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç –≤ –º–∏—Ä–µ</b> :)',
                                   parse_mode='html', reply_markup=rus_mark_up)
            bot.register_next_step_handler(msg, new_rus_kurs)
            bot.send_message(message.chat.id, '–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?ü§î\n–¢–æ–≥–¥–∞ –∂–º–∏ —Å—é–¥–∞!', reply_markup=inline)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, '–í –≥—Ä–∏–≤–Ω–∞—Ö –∏–ª–∏ —Ä—É–±–ª—è—Ö?', reply_markup=gr_markup)
            bot.register_next_step_handler(msg, grivna_rubl)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, rus_kurs)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def new_kurs(message):
    try:
        reply_question = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        dollar_question = types.KeyboardButton('–í –¥–æ–ª–ª–∞—Ä–∞—Ö')
        euro_question = types.KeyboardButton('–í –µ–≤—Ä–æ')
        grivna_question = types.KeyboardButton('–í –≥—Ä–∏–≤–Ω–∞—Ö')
        back_but = types.KeyboardButton('–ù–∞–∑–∞–¥')
        reply_question.add(dollar_question, euro_question, grivna_question, back_but)

        if message.text == '–ö—É—Ä—Å Bitcoin':
            msg = bot.send_message(message.chat.id, f'<b>–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?</b>', parse_mode='html',
                                   reply_markup=reply_question)
            bot.register_next_step_handler(msg, dollar_grivna_bitcoin)
        elif message.text == '–ö—É—Ä—Å Etherium':
            msg = bot.send_message(message.chat.id, f'<b>–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?</b>', parse_mode='html',
                                   reply_markup=reply_question)
            bot.register_next_step_handler(msg, dollar_grivna_ether)
        elif message.text == '–ö—É—Ä—Å Litecoin':
            msg = bot.send_message(message.chat.id, f'<b>–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?</b>', parse_mode='html',
                                   reply_markup=reply_question)
            bot.register_next_step_handler(msg, dollar_grivna_litecoin)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:</u>', parse_mode='html',
                                   reply_markup=markup_reply)
            bot.register_next_step_handler(msg, kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, new_kurs)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def new_rus_kurs(message):
    try:
        rus_reply_question = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        dollar_question = types.KeyboardButton('–í –¥–æ–ª–ª–∞—Ä–∞—Ö')
        rus_question = types.KeyboardButton('–í —Ä—É–±–ª—è—Ö')
        euro_question = types.KeyboardButton('–í –µ–≤—Ä–æ')
        back_but = types.KeyboardButton('–ù–∞–∑–∞–¥')
        rus_reply_question.add(dollar_question, euro_question, rus_question, back_but)

        if message.text == '–ö—É—Ä—Å Bitcoin':
            msg = bot.send_message(message.chat.id, f'<b>–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?</b>', parse_mode='html',
                                   reply_markup=rus_reply_question)
            bot.register_next_step_handler(msg, dollar_rus_bitcoin)
        elif message.text == '–ö—É—Ä—Å Etherium':
            msg = bot.send_message(message.chat.id, f'<b>–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?</b>', parse_mode='html',
                                   reply_markup=rus_reply_question)
            bot.register_next_step_handler(msg, dollar_rus_ether)
        elif message.text == '–ö—É—Ä—Å Litecoin':
            msg = bot.send_message(message.chat.id, f'<b>–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?</b>', parse_mode='html',
                                   reply_markup=rus_reply_question)
            bot.register_next_step_handler(msg, dollar_rus_litecoin)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:</u>', parse_mode='html',
                                   reply_markup=rus_markup_reply)
            bot.register_next_step_handler(msg, rus_kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, new_rus_kurs)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def dollar_grivna_bitcoin(message):
    try:
        if message.text == '–í –¥–æ–ª–ª–∞—Ä–∞—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Bitcoin = <b>{str(convert_bitcoin_dollar[0].text)}</b> –¥–æ–ª–ª–∞—Ä–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_bitcoin)
        elif message.text == '–í –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Bitcoin = <b>{str(convert_bitcoin_euro[0].text)}</b> –µ–≤—Ä–æ',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_bitcoin)
        elif message.text == '–í –≥—Ä–∏–≤–Ω–∞—Ö':
            msg = bot.send_message(message.chat.id, f'<b>1</b> Bitcoin = <b>{str(convert_bitcoin[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_bitcoin)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥</u>', reply_markup=mark_up,
                                   parse_mode='html')
            bot.register_next_step_handler(msg, new_kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, dollar_grivna_bitcoin)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def dollar_rus_bitcoin(message):
    try:
        if message.text == '–í –¥–æ–ª–ª–∞—Ä–∞—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Bitcoin = <b>{str(convert_bitcoin_dollar[0].text)}</b> –¥–æ–ª–ª–∞—Ä–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_bitcoin)
        elif message.text == '–í –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Bitcoin = <b>{str(convert_bitcoin_euro[0].text)}</b> –µ–≤—Ä–æ',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_bitcoin)
        elif message.text == '–í —Ä—É–±–ª—è—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Bitcoin = <b>{str(convert_rus_bitcoin[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_bitcoin)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥</u>', reply_markup=rus_mark_up,
                                   parse_mode='html')
            bot.register_next_step_handler(msg, new_rus_kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, dollar_rus_bitcoin)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def dollar_grivna_ether(message):
    try:
        if message.text == '–í –¥–æ–ª–ª–∞—Ä–∞—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Etherium = <b>{str(convert_ether_dollar[0].text)}</b> –¥–æ–ª–ª–∞—Ä–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_ether)
        elif message.text == '–í –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Etherium = <b>{str(convert_ether_euro[0].text)}</b> –µ–≤—Ä–æ',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_ether)
        elif message.text == '–í –≥—Ä–∏–≤–Ω–∞—Ö':
            msg = bot.send_message(message.chat.id, f'<b>1</b> Etherium = <b>{str(convert_ether[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_ether)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥</u>', reply_markup=mark_up,
                                   parse_mode='html')
            bot.register_next_step_handler(msg, new_kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, dollar_grivna_ether)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def dollar_rus_ether(message):
    try:
        if message.text == '–í –¥–æ–ª–ª–∞—Ä–∞—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Etherium = <b>{str(convert_ether_dollar[0].text)}</b> –¥–æ–ª–ª–∞—Ä–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_ether)
        elif message.text == '–í –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Etherium = <b>{str(convert_ether_euro[0].text)}</b> –µ–≤—Ä–æ',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_ether)
        elif message.text == '–í —Ä—É–±–ª—è—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Etherium = <b>{str(convert_rus_ether[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_ether)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥</u>', reply_markup=rus_mark_up,
                                   parse_mode='html')
            bot.register_next_step_handler(msg, new_rus_kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, dollar_rus_ether)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def dollar_grivna_litecoin(message):
    try:
        if message.text == '–í –¥–æ–ª–ª–∞—Ä–∞—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Litecoin = <b>{str(convert_litecoin_dollar[0].text)}</b> –¥–æ–ª–ª–∞—Ä–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_litecoin)
        elif message.text == '–í –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Litecoin = <b>{str(convert_litecoin_euro[0].text)}</b> –µ–≤—Ä–æ',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_litecoin)
        elif message.text == '–í –≥—Ä–∏–≤–Ω–∞—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Litecoin = <b>{str(convert_litecoin[0].text)}</b> –≥—Ä–∏–≤–Ω–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_grivna_litecoin)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥</u>', reply_markup=mark_up,
                                   parse_mode='html')
            bot.register_next_step_handler(msg, new_kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, dollar_grivna_litecoin)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


def dollar_rus_litecoin(message):
    try:
        if message.text == '–í –¥–æ–ª–ª–∞—Ä–∞—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Litecoin = <b>{str(convert_litecoin_dollar[0].text)}</b> –¥–æ–ª–ª–∞—Ä–∞–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_litecoin)
        elif message.text == '–í –µ–≤—Ä–æ':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Litecoin = <b>{str(convert_litecoin_euro[0].text)}</b> –µ–≤—Ä–æ',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_litecoin)
        elif message.text == '–í —Ä—É–±–ª—è—Ö':
            msg = bot.send_message(message.chat.id,
                                   f'<b>1</b> Litecoin = <b>{str(convert_rus_litecoin[0].text)}</b> —Ä—É–±–ª—è–º',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, dollar_rus_litecoin)
        elif message.text == '–ù–∞–∑–∞–¥':
            msg = bot.send_message(message.chat.id, f'<u>–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥</u>', reply_markup=rus_mark_up,
                                   parse_mode='html')
            bot.register_next_step_handler(msg, new_rus_kurs)
        elif message.text == '/start':
            send_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <b>{message.from_user.first_name}</b>\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç"
            bot.send_message(message.chat.id, send_message, parse_mode='html')
            bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—à—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?üòè', reply_markup=markup_inline)
        else:
            msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')
            bot.register_next_step_handler(msg, dollar_rus_litecoin)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ–¥–æ–º :/')


'''def schedule_checker(message):
    cursor.execute(f"""SELECT user_id FROM USER_TABLE WHERE user_id = {id}""")
    if cursor.fetchone() is None:
        schedule.cancel_job(lambda: job(message))
    else:
        schedule.every(10).seconds.do(lambda: job(message))
    while True:
        schedule.run_pending()
        sleep(1)'''

if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
